# -*- coding: utf-8 -*-
"""
Created on Wed Sep 22 12:30:17 2021

"""

'''
De ejemplo vamos a resolver
6x + 2y + z = 22   
-x + 8y + 2z = 30
x - y + 6z = 23  
'''
import numpy as np


######################
########LISTAS########
######################

#Elementos del ejemplo
#Line 83

#Definimos unos elementos para auxiliarnos en los calculos
#Forma manual
x = [0.0, 0.0, 0.0] 
aux = [1.0, 1.0, 1.0]

def Sol1(A,b, itermax,umbral):
    n=len(A)
    x = [0.0 for i in range(n)]
    aux = [1.0 for i in range(n)]
    #Repetimos hasta convergencia o 10,000 iteraciones
    for i in range(itermax):
            for h in range(n):
                aux[h] = 0.0  
                x[h] = (b[h]-sum([i*j*k for i,j,k in zip(aux,x,A[h])]))/A[h][h]
                aux[h] = 1.0
            #Error
            current_differences = [b[h] - sum([i*j for i,j in zip(x,A[h])]) for h in range(n)]
            error = sum([abs(i) for i in current_differences])
            if error <umbral:
                return x;
    else: 
        print("El resultado más cercano=" )
        print(x)


#Elementos del ejemplo
#Line 132

def Sol2(A_np,b_np, itermax1,umbral1):
    x_np = np.zeros(3) 
    aux_np = np.ones(3)
    n1=len(A_np)
    for ite in range(itermax1):
        for i in range(n1):
            aux_np[i] = 0.0
            x_np[i] = (b_np[i] - np.sum(x_np*aux_np*A_np[i,:]))/A_np[i][i]
            aux_np[i] = 1.0
    
        current_b = np.dot(A_np,x_np)
        error1 = np.sum(np.abs(current_b-b_np))
    
        if error1 < umbral1:
            return x_np;
    else:
        print("El resultado más cercano=" )
        print(x_np)
        
        
######################
#LECTURA DE DOCUMENTO#
######################
def read_inputs(text_basis):
    a_temp, b_temp = text_basis.strip().split("=")
    b_temp = eval(b_temp.strip(' '))
    a_temp = a_temp[:-1]
    a_temp = [eval(i) for i in a_temp.split()]
    
    return a_temp, b_temp

def read_file(path):
    b=[]
    A=[]
    with open (path, "r") as f:
        flag= 0
        for line in f:
            if line.strip() != "X":
                pass
            else: 
                flag=1
                continue
            if line == "Y":
                break
            
            if flag== 1:
                aux_1, aux_2 = read_inputs(line)
                A.append(aux_1)
                b.append(aux_2)
                
    return A, b
#################
#####PIVOTEO#####
#################

def pivoteo(A,B):
    B = np.transpose([B])
    AB  = np.concatenate((A,B),axis=1)

# Pivoteo parcial por filas
    tamano = np.shape(AB)
    n = tamano[0]

# Para cada fila en AB
    for i in range(0,n-1,1):
    # columna desde diagonal i en adelante
        columna = abs(AB[i:,i])
        elmax = np.argmax(columna)
        # maximo no es
        if (elmax !=0):
        # intercambia filas
            temporal = np.copy(AB[i,:])
            AB[i,:]  = AB[elmax+i,:]
            AB[elmax+i,:] = temporal
    
    l=len(AB)
    if l== 4:
        a,b,c,d,e =np.hsplit(AB,5)
        A_f=np.concatenate((a,b),axis=1)
        A_f=np.concatenate((A_f,c),axis=1)
        A_f=np.concatenate((A_f,d),axis=1)
        B_f= e
        return A_f, B_f
    if l == 3:             
        a,b,c,d =np.hsplit(AB,4)
        A_f=np.concatenate((a,b),axis=1)
        A_f=np.concatenate((A_f,c),axis=1)
        B_f= d
        return A_f, B_f
    
    if l== 2:
        a,b,c=np.hsplit(AB, 3)
        A_f=np.concatenate((a,b), axis= 1)
        B_f= c
        return A_f, B_f

def line_solve(ubicacion, itermaxf, umbralf):
    A,B = read_file(ubicacion)
    Af, Bf= pivoteo(A,B)
    x = Sol1(Af, Bf, itermaxf, umbralf)
    return x
    
####################LISTAS###################
#ruta = 'C:\Users\Armando\Documents\UNIVERSIDAD\UAQ\3er Semestre\Métodos numéricos\Tarea_9'
ruta = "Matriz.txt"
x = line_solve(ruta,10000, .00001)

"""A1 = [[6.0,2.0,1.0],
     [-1.0,8.0,2.0],
     [1.0,-1.0,6.0]]

b1 = [22.0, 30.0, 23.0]"""
        
print("Solución con lectura y pivoteo")    
print(line_solve(ruta,10000, .00001))
print("\n")

ruta2 = "Matriz2.txt"
A12, b12 = read_file(ruta2)

"""A12 = [[7.0,8.0],
     [9.0,14.0]]

b12 = [6.0,14.0]"""

print("Solución con matriz 2x2 y lectura")    
print(Sol1(A12, b12, 10000, .00001))
print("\n")

####################NUMPY####################
A2 = np.array([[6.0,2.0,1.0],
               [-1.0,8.0,2.0],
               [1.0,-1.0,6.0]])

b2 = np.array([22.0, 30.0, 23.0])
print("Solución Numpy")
print(Sol2(A2, b2, 10000, .00001))
print("\n")

